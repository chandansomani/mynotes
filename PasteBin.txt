private async void checkDuplicatesButton_Click(object sender, EventArgs e)
{
    try
    {
        if (this.MainDataSource is null || this.MainDataSource.Rows.Count == 0)
        {
            MessageBox.Show("No data loaded to check for duplicates.", "Duplicate Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
            return;
        }

        // Disable the button to prevent multiple clicks
        checkDuplicatesButton.Enabled = false;
        toolStripStatusSearch.Text = "Checking for duplicates...";

        var result = await Task.Run(() => CheckForDuplicates());

        // Process results
        if (result.DuplicateIndices.Count > 0)
        {
            MessageBox.Show($"Duplicates found in {result.DuplicateIndices.Count} rows.", "Duplicate Check", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            // Highlight duplicates in the DataGridView
            foreach (int index in result.DuplicateIndices)
            {
                this.mainGridView.Rows[index].DefaultCellStyle.BackColor = Color.LightCoral;
            }
        }
        else
        {
            MessageBox.Show("No duplicates found.", "Duplicate Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        toolStripStatusSearch.Text = "Duplicate check completed.";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        toolStripStatusSearch.Text = "Error occurred during duplicate check.";
    }
    finally
    {
        // Re-enable the button
        checkDuplicatesButton.Enabled = true;
    }
}

private (List<int> DuplicateIndices, int TotalRows) CheckForDuplicates()
{
    var seenRows = new HashSet<string>();
    var duplicates = new List<int>();

    for (int i = 0; i < this.MainDataSource.Rows.Count; i++)
    {
        var row = this.MainDataSource.Rows[i];
        var hashKey = GetRowHashKey(row);

        if (!seenRows.Add(hashKey))
        {
            duplicates.Add(i);
        }
    }

    return (duplicates, this.MainDataSource.Rows.Count);
}
